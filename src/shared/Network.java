package shared;

import java.io.Closeable;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.util.HashMap;

import static shared.IO.println;

public class Network {
    public static final String CAR_IP = "192.168.1.21"; // TODO detect via broadcast?
    public static final int CAR_PORT = 5678;
    public static final int CONTROLLER_PORT = 5679;

    public static class Controller {
        // TODO refactor static hack
        private static final HashMap<Byte, Long> id2time = new HashMap<Byte, Long>();

        public static Closeable start() throws IOException {
            return Udp.listen(CONTROLLER_PORT,
                    new Udp.OnReceive() {
                        public void onReceive(InetSocketAddress from, byte[] bytes) {
                            if (bytes.length != 1) {
                                println("! Got invalid packet: " + Udp.toString(bytes));
                            } else {
                                byte id = bytes[0];

                                // TODO count missing packets
                                // TODO remove timed-out ids by checking if time delta in insane

                                long now = System.currentTimeMillis();
                                if (id2time.containsKey(id)) {
                                    long then = id2time.get(id);
                                    println("~ " + (now - then));
                                } else {
                                    println("! Got pong from unknown id: " + id);
                                }
                            }
                        }
                    });
        }

        /**
         * @param id       Id sequence generated by controller.
         *                 The car should reply with confirmation packed containing this id.
         *                 Used for detection of latency and missing packets.
         * @param steering -127 = left,     0 = central, 127 = right
         * @param speed    -127 = backward, 0 = neutral, 127 = forward
         */
        public static void update(InetSocketAddress to, byte id, byte steering, byte speed) {
            id2time.put(id, System.currentTimeMillis());
            Udp.send(to, new byte[]{id, steering, speed});
        }
    }

    public static class Car {
        public static Closeable start() throws IOException {
            return Udp.listen(CAR_PORT,
                    new Udp.OnReceive() {
                        public void onReceive(InetSocketAddress from, byte[] bytes) {
                            if (bytes.length != 3) {
                                println("! Got invalid packet: " + Udp.toString(bytes));
                            } else {
                                byte id = bytes[0];
                                byte steering = bytes[1];
                                byte speed = bytes[2];

                                Car.confirmUpdate(new InetSocketAddress(from.getHostString(), CONTROLLER_PORT), id);
                            }
                        }
                    });
        }

        public static void confirmUpdate(InetSocketAddress to, byte id) {
            Udp.send(to, new byte[]{id});
        }
    }
}
