package shared;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.util.HashMap;

import static shared.IO.println;

public class Network extends Udp {
    public static final String CAR_IP = "192.168.88.82"; // TODO detect via broadcast?
    public static final int PORT = 46352;

    public static final int CONTROLLER_UPDATE = 1;
    public static final int CAR_UPDATE_RECEIVED = 2;

    private static HashMap<Byte, Long> id2time = new HashMap<>();

    public Network() throws IOException {
        super(PORT);
    }

    protected void onReceive(InetSocketAddress from, byte[] bytes) {
        if (bytes.length == 0) {
            println("! Got empty packet");
        } else {
            switch (bytes[0]) {
                case CONTROLLER_UPDATE:
                    if (bytes.length != 4) {
                        println("! Got invalid packet: " + Udp.toString(bytes));
                    } else {
                        byte id = bytes[1];
                        byte steering = bytes[2];
                        byte speed = bytes[3];

                        car_updateReceived(from, id);
                    }
                    break;

                case CAR_UPDATE_RECEIVED:
                    if (bytes.length != 2) {
                        println("! Got invalid packet: " + Udp.toString(bytes));
                    } else {
                        byte id = bytes[1];

                        // TODO count missing packets
                        // TODO remove timed-out ids by checking if time delta in insane

                        long now = System.currentTimeMillis();
                        if (id2time.containsKey(id)) {
                            long then = id2time.get(id);
                            println("~ " + (now - then));
                        } else {
                            println("! Got pong from unknown id: " + id);
                        }
                    }
                    break;

                default:
                    println("! Got unknown packet: " + Udp.toString(bytes));
                    break;

            }
        }
    }
    /**
     * @param id       Id sequence generated by controller.
     *                 The car should reply with confirmation packed containing this id.
     *                 Used for detection of latency and missing packets.
     * @param steering -127 = left,     0 = central, 127 = right
     * @param speed    -127 = backward, 0 = neutral, 127 = forward
     */
    public void controller_update(InetSocketAddress to, byte id, byte steering, byte speed) {
        id2time.put(id, System.currentTimeMillis());
        send(to, new byte[]{CONTROLLER_UPDATE, id, steering, speed});
    }

    public void car_updateReceived(InetSocketAddress to, byte id) {
        send(to, new byte[]{CAR_UPDATE_RECEIVED, id});
    }
}
